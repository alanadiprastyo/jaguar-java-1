pipeline {
    agent any

    stages{
        stage('Checkout'){
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/alanadiprastyo/jaguar-java-1.git']]])
            }
        }

        stage('Build Maven'){
            steps{
                sh '''
                mvn clean install
                '''
            }
        }

        stage('i3gis AppSec') {
            steps {
                script {
                    echo "Scanning project jaguar-java with i3gis..."
                    final String urlScan = """--location -g --request POST 'https://api.i3gis.id/scan-svc/scan' --header 'Content-Type: application/json' --header 'Authorization: Bearer N/dXtDoT3P5IKVMVJOndUSGYZoInEj4hZaZrAmJvTB9mI1Hck1KrgDzlQuGcBTgAox2BZugo77sWfjBLdZkOeWn+ydH9fUbT/l27D8dn79LeXVdwINo5uJJle5xvTLrPHF+5+5ISTMJeL79tuDmnkw==' -d '{"project_id":2}'"""
                    final def (String responseScan, String codeScan) = sh(script: "set +x; curl -s -w '\n%{response_code}' $urlScan", returnStdout: true).trim().tokenize("\n")

                    echo "HTTP response status code: $codeScan"

                    if (codeScan != "200") {
                        echo "Response: " + responseScan
                        error("Build failed because scan not success...")
                    } else {
                        echo "Scan project jaguar-java with i3gis..."
                    }

                    echo "Scan project jaguar-java with i3gis is starting..."
                }
            }
        }

        stage('Status i3gis AppSec') {
            steps {
                script {
                    echo "Get scan status..."
                    final Boolean status_running = true

                    while(status_running) {
                        sleep(time: 5, unit: "SECONDS")
                        echo "Scan still running..."
                        final String urlStatus = """--location -g --request GET 'https://api.i3gis.id/scan-svc/scan/2' --header 'Content-Type: application/json' --header 'Authorization: Bearer N/dXtDoT3P5IKVMVJOndUSGYZoInEj4hZaZrAmJvTB9mI1Hck1KrgDzlQuGcBTgAox2BZugo77sWfjBLdZkOeWn+ydH9fUbT/l27D8dn79LeXVdwINo5uJJle5xvTLrPHF+5+5ISTMJeL79tuDmnkw=='"""
                        final def (String responseStatus, String codeStatus) = sh(script: "set +x; curl -s -w '\n%{response_code}' $urlStatus", returnStdout: true).trim().tokenize("\n")
                        echo "HTTP response status code: $codeStatus"

                        if (codeStatus != "200" && codeStatus != "404") {
                            echo "Response: " + responseStatus
                            error("Scan failed...")
                        }

                        if(codeStatus == "404") break
                    }

                    echo "Scan finished..."
                }
            }
        }
       
        stage('Build Container Image'){
            steps{
                sh '''
                docker build -t jaguarjava .
                '''
            }
        }
        stage('Push Container Image'){
            steps{
                echo "push to registry"
            }
        }
        stage('Deploy ke Dev'){
            steps{
                echo "Succes deploy to Dev"
            }
        }
        stage('Scan i3gis DynaSec'){
            steps{
                echo "Succes Scan DynaSec"
            }
        }

	    stage('Deploy to Production'){
            input {
                message "Are you sure to deploy on Production?"
                ok "Yes, Deploy to Production"
            }
	    steps{
		    echo "Deploy to production"
	    }
	    post{
                success {
                    echo 'Services success deploy to prod'
                }
                failure {
                    echo 'Services faild deploy to prod'
                }
	  }
	}
    }
}
